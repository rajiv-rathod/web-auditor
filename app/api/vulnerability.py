from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import Dict, Any, List

from app.core.database import get_db
from app.api.auth import get_current_user
from app.models.models import User, Vulnerability
from app.schemas.schemas import (
    SQLInjectionScanRequest,
    XSSScanRequest,
    DirectoryBruteforceRequest,
    Vulnerability as VulnerabilitySchema
)
from app.services.vulnerability_service import (
    SQLInjectionService,
    XSSService,
    DirectoryBruteforceService,
    CMSService
)

router = APIRouter()

@router.post("/sql-injection")
async def sql_injection_scan(
    request: SQLInjectionScanRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
) -> Dict[str, Any]:
    """Perform SQL injection vulnerability scan"""
    
    try:
        sql_service = SQLInjectionService()
        results = await sql_service.scan(
            url=request.url,
            parameters=request.parameters,
            cookie=request.cookie,
            user_agent=request.user_agent
        )
        
        return {
            "url": request.url,
            "vulnerable": results.get("vulnerable", False),
            "vulnerabilities": results.get("vulnerabilities", []),
            "payloads_tested": results.get("payloads_tested", 0),
            "database_info": results.get("database_info", {}),
            "recommendations": results.get("recommendations", [])
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/xss")
async def xss_scan(
    request: XSSScanRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
) -> Dict[str, Any]:
    """Perform XSS vulnerability scan"""
    
    try:
        xss_service = XSSService()
        results = await xss_service.scan(
            url=request.url,
            parameters=request.parameters,
            payloads=request.payloads
        )
        
        return {
            "url": request.url,
            "vulnerable": results.get("vulnerable", False),
            "vulnerabilities": results.get("vulnerabilities", []),
            "xss_types": results.get("xss_types", []),
            "vulnerable_parameters": results.get("vulnerable_parameters", []),
            "recommendations": results.get("recommendations", [])
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/directory-bruteforce")
async def directory_bruteforce(
    request: DirectoryBruteforceRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
) -> Dict[str, Any]:
    """Perform directory bruteforce scan"""
    
    try:
        dir_service = DirectoryBruteforceService()
        results = await dir_service.scan(
            url=request.url,
            wordlist=request.wordlist,
            extensions=request.extensions,
            threads=request.threads
        )
        
        return {
            "url": request.url,
            "found_directories": results.get("directories", []),
            "found_files": results.get("files", []),
            "total_requests": results.get("total_requests", 0),
            "status_codes": results.get("status_codes", {}),
            "interesting_findings": results.get("interesting", [])
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/cms-scan/{url}")
async def cms_vulnerability_scan(
    url: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
) -> Dict[str, Any]:
    """Perform CMS-specific vulnerability scan"""
    
    try:
        cms_service = CMSService()
        results = await cms_service.scan(url)
        
        return {
            "url": url,
            "cms_detected": results.get("cms_type", None),
            "version": results.get("version", None),
            "vulnerabilities": results.get("vulnerabilities", []),
            "outdated_plugins": results.get("outdated_plugins", []),
            "security_headers": results.get("security_headers", {}),
            "recommendations": results.get("recommendations", [])
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/file-upload-test/{url}")
async def file_upload_test(
    url: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
) -> Dict[str, Any]:
    """Test file upload vulnerabilities"""
    
    try:
        # This would implement file upload bypass testing
        # For now, return a mock response
        return {
            "url": url,
            "upload_vulnerable": False,
            "bypass_methods": [],
            "allowed_extensions": [],
            "file_size_limit": None,
            "recommendations": [
                "Implement proper file type validation",
                "Use whitelist approach for allowed extensions",
                "Scan uploaded files for malware",
                "Store uploads outside web root"
            ]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/auth-test/{url}")
async def authentication_test(
    url: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
) -> Dict[str, Any]:
    """Test authentication and session management"""
    
    try:
        # This would implement authentication testing
        # For now, return a mock response
        return {
            "url": url,
            "weak_jwt": False,
            "session_fixation": False,
            "insecure_cookies": [],
            "password_policy": {
                "min_length": None,
                "complexity_required": False,
                "lockout_policy": False
            },
            "recommendations": [
                "Implement strong JWT signing",
                "Use secure session management",
                "Set secure cookie flags",
                "Implement account lockout policy"
            ]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))